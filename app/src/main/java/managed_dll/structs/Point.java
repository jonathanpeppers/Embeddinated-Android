/**
 * ----------------------------------------------------------------------------
 * <auto-generated>
 * This is autogenerated code by Embeddinator-4000.
 * Do not edit this file or all your changes will be lost after re-generation.
 * </auto-generated>
 * ----------------------------------------------------------------------------
 */
package managed_dll.structs;

import mono.embeddinator.*;
import com.sun.jna.*;

public final class Point {
    public com.sun.jna.Pointer __object;

    public Point(com.sun.jna.Pointer object) { this.__object = object; }

    public Point(float x, float y) {
        __object = managed_dll.Native_managed_dll.INSTANCE.Structs_Point_new(x, y);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public float getX() {
        float __ret = managed_dll.Native_managed_dll.INSTANCE.Structs_Point_get_X(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public float getY() {
        float __ret = managed_dll.Native_managed_dll.INSTANCE.Structs_Point_get_Y(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public static boolean opEquality(managed_dll.structs.Point left, managed_dll.structs.Point right) {
        byte __ret = managed_dll.Native_managed_dll.INSTANCE.Structs_Point_op_Equality(left == null ? null : left.__object, right == null ? null : right.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret != 0;
    }

    public static boolean opInequality(managed_dll.structs.Point left, managed_dll.structs.Point right) {
        byte __ret = managed_dll.Native_managed_dll.INSTANCE.Structs_Point_op_Inequality(left == null ? null : left.__object, right == null ? null : right.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret != 0;
    }

    public static managed_dll.structs.Point opAddition(managed_dll.structs.Point left, managed_dll.structs.Point right) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Structs_Point_op_Addition(left == null ? null : left.__object, right == null ? null : right.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.structs.Point(__ret));
    }

    public static managed_dll.structs.Point opSubtraction(managed_dll.structs.Point left, managed_dll.structs.Point right) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Structs_Point_op_Subtraction(left == null ? null : left.__object, right == null ? null : right.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.structs.Point(__ret));
    }

    public static managed_dll.structs.Point get_Zero() {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Structs_Point_get_Zero();
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.structs.Point(__ret));
    }

    public static void set_Zero(managed_dll.structs.Point value) {
        managed_dll.Native_managed_dll.INSTANCE.Structs_Point_set_Zero(value == null ? null : value.__object);
        mono.embeddinator.Runtime.checkExceptions();
    }
}
