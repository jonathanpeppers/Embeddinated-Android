/**
 * ----------------------------------------------------------------------------
 * <auto-generated>
 * This is autogenerated code by Embeddinator-4000.
 * Do not edit this file or all your changes will be lost after re-generation.
 * </auto-generated>
 * ----------------------------------------------------------------------------
 */
package managed_dll.overloads;

import mono.embeddinator.*;
import com.sun.jna.*;

public class AllOperatorsWithFriendly {
    public com.sun.jna.Pointer __object;

    public AllOperatorsWithFriendly(com.sun.jna.Pointer object) { this.__object = object; }

    public AllOperatorsWithFriendly(int val) {
        __object = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_new(val);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public int getValue() {
        int __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_get_Value(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly opAddition(managed_dll.overloads.AllOperatorsWithFriendly c1, managed_dll.overloads.AllOperatorsWithFriendly c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_op_Addition(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly add(managed_dll.overloads.AllOperatorsWithFriendly c1, managed_dll.overloads.AllOperatorsWithFriendly c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_Add(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly opSubtraction(managed_dll.overloads.AllOperatorsWithFriendly c1, managed_dll.overloads.AllOperatorsWithFriendly c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_op_Subtraction(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly subtract(managed_dll.overloads.AllOperatorsWithFriendly c1, managed_dll.overloads.AllOperatorsWithFriendly c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_Subtract(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly opMultiply(managed_dll.overloads.AllOperatorsWithFriendly c1, managed_dll.overloads.AllOperatorsWithFriendly c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_op_Multiply(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly multiply(managed_dll.overloads.AllOperatorsWithFriendly c1, managed_dll.overloads.AllOperatorsWithFriendly c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_Multiply(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly opDivision(managed_dll.overloads.AllOperatorsWithFriendly c1, managed_dll.overloads.AllOperatorsWithFriendly c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_op_Division(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly divide(managed_dll.overloads.AllOperatorsWithFriendly c1, managed_dll.overloads.AllOperatorsWithFriendly c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_Divide(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly opExclusiveOr(managed_dll.overloads.AllOperatorsWithFriendly c1, managed_dll.overloads.AllOperatorsWithFriendly c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_op_ExclusiveOr(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly xor(managed_dll.overloads.AllOperatorsWithFriendly c1, managed_dll.overloads.AllOperatorsWithFriendly c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_Xor(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly opBitwiseOr(managed_dll.overloads.AllOperatorsWithFriendly c1, managed_dll.overloads.AllOperatorsWithFriendly c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_op_BitwiseOr(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly bitwiseOr(managed_dll.overloads.AllOperatorsWithFriendly c1, managed_dll.overloads.AllOperatorsWithFriendly c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_BitwiseOr(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly opBitwiseAnd(managed_dll.overloads.AllOperatorsWithFriendly c1, managed_dll.overloads.AllOperatorsWithFriendly c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_op_BitwiseAnd(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly bitwiseAnd(managed_dll.overloads.AllOperatorsWithFriendly c1, managed_dll.overloads.AllOperatorsWithFriendly c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_BitwiseAnd(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly opIncrement(managed_dll.overloads.AllOperatorsWithFriendly c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_op_Increment(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly increment(managed_dll.overloads.AllOperatorsWithFriendly c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_Increment(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly opDecrement(managed_dll.overloads.AllOperatorsWithFriendly c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_op_Decrement(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly decrement(managed_dll.overloads.AllOperatorsWithFriendly c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_Decrement(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly opRightShift(managed_dll.overloads.AllOperatorsWithFriendly c1, int a) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_op_RightShift(c1 == null ? null : c1.__object, a);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly rightShift(managed_dll.overloads.AllOperatorsWithFriendly c1, int a) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_RightShift(c1 == null ? null : c1.__object, a);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly opLeftShift(managed_dll.overloads.AllOperatorsWithFriendly c1, int a) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_op_LeftShift(c1 == null ? null : c1.__object, a);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly leftShift(managed_dll.overloads.AllOperatorsWithFriendly c1, int a) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_LeftShift(c1 == null ? null : c1.__object, a);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly opOnesComplement(managed_dll.overloads.AllOperatorsWithFriendly c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_op_OnesComplement(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly onesComplement(managed_dll.overloads.AllOperatorsWithFriendly c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_OnesComplement(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly opUnaryPlus(managed_dll.overloads.AllOperatorsWithFriendly c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_op_UnaryPlus(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly plus(managed_dll.overloads.AllOperatorsWithFriendly c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_Plus(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly negate(managed_dll.overloads.AllOperatorsWithFriendly c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_Negate(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }

    public static managed_dll.overloads.AllOperatorsWithFriendly opUnaryNegation(managed_dll.overloads.AllOperatorsWithFriendly c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperatorsWithFriendly_op_UnaryNegation(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperatorsWithFriendly(__ret));
    }
}
