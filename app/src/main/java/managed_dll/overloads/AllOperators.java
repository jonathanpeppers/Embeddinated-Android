/**
 * ----------------------------------------------------------------------------
 * <auto-generated>
 * This is autogenerated code by Embeddinator-4000.
 * Do not edit this file or all your changes will be lost after re-generation.
 * </auto-generated>
 * ----------------------------------------------------------------------------
 */
package managed_dll.overloads;

import mono.embeddinator.*;
import com.sun.jna.*;

public class AllOperators {
    public com.sun.jna.Pointer __object;

    public AllOperators(com.sun.jna.Pointer object) { this.__object = object; }

    public AllOperators(int val) {
        __object = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_new(val);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public int getValue() {
        int __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_get_Value(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public static managed_dll.overloads.AllOperators opAddition(managed_dll.overloads.AllOperators c1, managed_dll.overloads.AllOperators c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_Addition(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opSubtraction(managed_dll.overloads.AllOperators c1, managed_dll.overloads.AllOperators c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_Subtraction(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opMultiply(managed_dll.overloads.AllOperators c1, managed_dll.overloads.AllOperators c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_Multiply(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opDivision(managed_dll.overloads.AllOperators c1, managed_dll.overloads.AllOperators c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_Division(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opDivision_1(managed_dll.overloads.AllOperators c1, int c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_Division(c1 == null ? null : c1.__object, c2);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opDivision_2(int c1, managed_dll.overloads.AllOperators c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_Division(c1, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opDivision_3(managed_dll.overloads.AllOperators c1, long c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_Division(c1 == null ? null : c1.__object, c2);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opExclusiveOr(managed_dll.overloads.AllOperators c1, managed_dll.overloads.AllOperators c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_ExclusiveOr(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opBitwiseOr(managed_dll.overloads.AllOperators c1, managed_dll.overloads.AllOperators c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_BitwiseOr(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opBitwiseAnd(managed_dll.overloads.AllOperators c1, managed_dll.overloads.AllOperators c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_BitwiseAnd(c1 == null ? null : c1.__object, c2 == null ? null : c2.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opBitwiseAnd_1(managed_dll.overloads.AllOperators c1, int c2) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_BitwiseAnd(c1 == null ? null : c1.__object, c2);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opIncrement(managed_dll.overloads.AllOperators c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_Increment(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opDecrement(managed_dll.overloads.AllOperators c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_Decrement(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opRightShift(managed_dll.overloads.AllOperators c1, int a) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_RightShift(c1 == null ? null : c1.__object, a);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opLeftShift(managed_dll.overloads.AllOperators c1, int a) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_LeftShift(c1 == null ? null : c1.__object, a);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opOnesComplement(managed_dll.overloads.AllOperators c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_OnesComplement(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opUnaryPlus(managed_dll.overloads.AllOperators c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_UnaryPlus(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }

    public static managed_dll.overloads.AllOperators opUnaryNegation(managed_dll.overloads.AllOperators c1) {
        com.sun.jna.Pointer __ret = managed_dll.Native_managed_dll.INSTANCE.Overloads_AllOperators_op_UnaryNegation(c1 == null ? null : c1.__object);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new managed_dll.overloads.AllOperators(__ret));
    }
}
