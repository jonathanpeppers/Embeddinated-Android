/**
 * ----------------------------------------------------------------------------
 * <auto-generated>
 * This is autogenerated code by Embeddinator-4000.
 * Do not edit this file or all your changes will be lost after re-generation.
 * </auto-generated>
 * ----------------------------------------------------------------------------
 */
package managed_dll;

import mono.embeddinator.*;
import com.sun.jna.*;

public class BuiltinTypes {
    public com.sun.jna.Pointer __object;

    public BuiltinTypes(com.sun.jna.Pointer object) { this.__object = object; }

    public BuiltinTypes() {
        __object = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_new();
        mono.embeddinator.Runtime.checkExceptions();
    }

    public void returnsVoid() {
        managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_ReturnsVoid(__object);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public boolean returnsBool() {
        byte __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_ReturnsBool(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret != 0;
    }

    public byte returnsSByte() {
        byte __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_ReturnsSByte(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public UnsignedByte returnsByte() {
        UnsignedByte __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_ReturnsByte(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public short returnsShort() {
        short __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_ReturnsShort(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public UnsignedShort returnsUShort() {
        UnsignedShort __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_ReturnsUShort(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public int returnsInt() {
        int __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_ReturnsInt(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public UnsignedInt returnsUInt() {
        UnsignedInt __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_ReturnsUInt(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public long returnsLong() {
        long __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_ReturnsLong(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public UnsignedLong returnsULong() {
        UnsignedLong __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_ReturnsULong(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public char returnsChar() {
        char __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_ReturnsChar(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public String returnsString() {
        String __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_ReturnsString(__object);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public boolean passAndReturnsBool(boolean v) {
        byte __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassAndReturnsBool(__object, (byte)(v? 1 : 0));
        mono.embeddinator.Runtime.checkExceptions();
        return __ret != 0;
    }

    public byte passAndReturnsSByte(byte v) {
        byte __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassAndReturnsSByte(__object, v);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public UnsignedByte passAndReturnsByte(UnsignedByte v) {
        UnsignedByte __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassAndReturnsByte(__object, v);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public short passAndReturnsShort(short v) {
        short __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassAndReturnsShort(__object, v);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public UnsignedShort passAndReturnsUShort(UnsignedShort v) {
        UnsignedShort __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassAndReturnsUShort(__object, v);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public int passAndReturnsInt(int v) {
        int __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassAndReturnsInt(__object, v);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public UnsignedInt passAndReturnsUInt(UnsignedInt v) {
        UnsignedInt __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassAndReturnsUInt(__object, v);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public long passAndReturnsLong(long v) {
        long __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassAndReturnsLong(__object, v);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public UnsignedLong passAndReturnsULong(UnsignedLong v) {
        UnsignedLong __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassAndReturnsULong(__object, v);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public char passAndReturnsChar(char v) {
        char __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassAndReturnsChar(__object, v);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public String passAndReturnsString(String v) {
        String __ret = managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassAndReturnsString(__object, v);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public void passOutInt(mono.embeddinator.Out<Integer> v) {
        if (v == null)
            throw new NullRefParameterException("v");
        com.sun.jna.ptr.IntByReference __v = (v.get()) != null ? new com.sun.jna.ptr.IntByReference(v.get()) : new com.sun.jna.ptr.IntByReference();
        managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassOutInt(__object, __v);
        mono.embeddinator.Runtime.checkExceptions();
        v.set(__v.getValue());
    }

    public void passRefInt(mono.embeddinator.Ref<Integer> v) {
        if (v == null || v.get() == null)
            throw new NullRefParameterException("v");
        com.sun.jna.ptr.IntByReference __v = (v.get()) != null ? new com.sun.jna.ptr.IntByReference(v.get()) : new com.sun.jna.ptr.IntByReference();
        managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassRefInt(__object, __v);
        mono.embeddinator.Runtime.checkExceptions();
        v.set(__v.getValue());
    }

    public void passOutString(mono.embeddinator.Out<String> v) {
        if (v == null)
            throw new NullRefParameterException("v");
        mono.embeddinator.GString __v = (v.get()) != null ? new mono.embeddinator.GString(v.get()) : new mono.embeddinator.GString();
        managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassOutString(__object, __v);
        mono.embeddinator.Runtime.checkExceptions();
        v.set(__v.getValue());
    }

    public void passRefString(mono.embeddinator.Ref<String> v) {
        if (v == null)
            throw new NullRefParameterException("v");
        mono.embeddinator.GString __v = (v.get()) != null ? new mono.embeddinator.GString(v.get()) : new mono.embeddinator.GString();
        managed_dll.Native_managed_dll.INSTANCE.BuiltinTypes_PassRefString(__object, __v);
        mono.embeddinator.Runtime.checkExceptions();
        v.set(__v.getValue());
    }
}
