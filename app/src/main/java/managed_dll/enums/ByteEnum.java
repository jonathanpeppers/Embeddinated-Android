/**
 * ----------------------------------------------------------------------------
 * <auto-generated>
 * This is autogenerated code by Embeddinator-4000.
 * Do not edit this file or all your changes will be lost after re-generation.
 * </auto-generated>
 * ----------------------------------------------------------------------------
 */
package managed_dll.enums;

import mono.embeddinator.*;
import com.sun.jna.*;

public final class ByteEnum {
    public static final ByteEnum Zero = new ByteEnum(new UnsignedByte(0));
    public static final ByteEnum Max = new ByteEnum(new UnsignedByte(255));

    private final UnsignedByte id;
    ByteEnum(UnsignedByte id) { this.id = id; }
    public UnsignedByte getValue() { return id; }

    public static ByteEnum fromOrdinal(UnsignedByte n) {
        return valuesMap.containsKey(n.intValue()) ? valuesMap.get(n.intValue()) : new ByteEnum(n);
    }

    private static final java.util.Map<UnsignedByte, ByteEnum> valuesMap = 
        new java.util.HashMap<UnsignedByte, ByteEnum>();

    static {
        try {
            java.lang.reflect.Field[] constants = ByteEnum.class.getFields();
            for (final java.lang.reflect.Field field : constants) {
                ByteEnum item = (ByteEnum) field.get(null);
                valuesMap.put(item.getValue(), item);
            }
        } catch(java.lang.IllegalAccessException ex) {
        }
    }
}
