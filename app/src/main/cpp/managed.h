// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by Embeddinator-4000.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "glib.h"
#include "mono_embeddinator.h"

MONO_EMBEDDINATOR_BEGIN_DECLS

typedef MonoEmbedArray _Array;
typedef MonoEmbedArray _StringArray;
typedef MonoEmbedArray _BoolArray;
typedef MonoEmbedArray _CharArray;
typedef MonoEmbedArray _DoubleArray;
typedef MonoEmbedArray _FloatArray;
typedef MonoEmbedArray _SignedcharArray;
typedef MonoEmbedArray _ShortArray;
typedef MonoEmbedArray _IntArray;
typedef MonoEmbedArray _LongArray;
typedef MonoEmbedArray _UnsignedshortArray;
typedef MonoEmbedArray _UnsignedintArray;
typedef MonoEmbedArray _UnsignedlongArray;
typedef MonoEmbedArray _UnsignedcharArray;
typedef MonoEmbedObject BuiltinTypes;
typedef MonoEmbedObject ClassWithoutNamespace;
typedef MonoEmbedObject Platform;
typedef MonoEmbedObject Type_SByte;
typedef MonoEmbedObject Type_Int16;
typedef MonoEmbedObject Type_Int32;
typedef MonoEmbedObject Type_Int64;
typedef MonoEmbedObject Type_Byte;
typedef MonoEmbedObject Type_UInt16;
typedef MonoEmbedObject Type_UInt32;
typedef MonoEmbedObject Type_UInt64;
typedef MonoEmbedObject Type_Single;
typedef MonoEmbedObject Type_Double;
typedef MonoEmbedObject Type_Char;
typedef MonoEmbedObject Type_String;
typedef MonoEmbedObject MyException;
typedef MonoEmbedObject MyNextException;
typedef MonoEmbedObject Type_Decimal;
typedef MonoEmbedObject ExposeExtraTypes;
typedef MonoEmbedObject Arrays_Arr;
typedef MonoEmbedObject Arrays_ValueHolder;
typedef MonoEmbedObject Interfaces_IMakeItUp;
typedef MonoEmbedObject Interfaces_Supplier;
typedef MonoEmbedObject Interfaces_IOperations;
typedef MonoEmbedObject Interfaces_ManagedAdder;
typedef MonoEmbedObject Interfaces_OpConsumer;
typedef MonoEmbedObject Interfaces_ExposeIFormatProvider;
typedef MonoEmbedObject NestedClasses_ParentClass;
typedef MonoEmbedObject NestedClasses_NestedClass;
typedef MonoEmbedObject Overloads_OperatorCollision;
typedef MonoEmbedObject Overloads_AllOperators;
typedef MonoEmbedObject Overloads_AllOperatorsWithFriendly;
typedef MonoEmbedObject Overloads_EqualOverrides;
typedef MonoEmbedObject Overloads_ConflictingNamingOverload;
typedef MonoEmbedObject ShortParameters_Class;
typedef MonoEmbedObject Subscripts_BoolCollection;
typedef MonoEmbedObject Subscripts_BoolDictionaryCollection;
typedef MonoEmbedObject Subscripts_SbyteCollection;
typedef MonoEmbedObject Subscripts_SbyteDictionaryCollection;
typedef MonoEmbedObject Subscripts_ByteCollection;
typedef MonoEmbedObject Subscripts_ByteDictionaryCollection;
typedef MonoEmbedObject Subscripts_ShortCollection;
typedef MonoEmbedObject Subscripts_ShortDictionaryCollection;
typedef MonoEmbedObject Subscripts_UshortCollection;
typedef MonoEmbedObject Subscripts_UshortDictionaryCollection;
typedef MonoEmbedObject Subscripts_IntCollection;
typedef MonoEmbedObject Subscripts_IntDictionaryCollection;
typedef MonoEmbedObject Subscripts_UintCollection;
typedef MonoEmbedObject Subscripts_UintDictionaryCollection;
typedef MonoEmbedObject Subscripts_LongCollection;
typedef MonoEmbedObject Subscripts_LongDictionaryCollection;
typedef MonoEmbedObject Subscripts_UlongCollection;
typedef MonoEmbedObject Subscripts_UlongDictionaryCollection;
typedef MonoEmbedObject Subscripts_FloatCollection;
typedef MonoEmbedObject Subscripts_FloatDictionaryCollection;
typedef MonoEmbedObject Subscripts_DoubleCollection;
typedef MonoEmbedObject Subscripts_DoubleDictionaryCollection;
typedef MonoEmbedObject Subscripts_CharCollection;
typedef MonoEmbedObject Subscripts_CharDictionaryCollection;
typedef MonoEmbedObject Subscripts_StringCollection;
typedef MonoEmbedObject Subscripts_StringDictionaryCollection;
typedef MonoEmbedObject Subscripts_IntCollectionNoSetter;
typedef MonoEmbedObject Subscripts_IntCollectionNoGetter;
typedef MonoEmbedObject Structs_Point;
typedef MonoEmbedObject Properties_Query;
typedef MonoEmbedObject Properties_DuplicateIndexedProperties;
typedef MonoEmbedObject First_ClassWithSingleNamespace;
typedef MonoEmbedObject First_Second_ClassWithNestedNamespace;
typedef MonoEmbedObject First_Second_Third_ClassWithNestedNamespace;
typedef MonoEmbedObject Methods_Static;
typedef MonoEmbedObject Methods_Parameters;
typedef MonoEmbedObject Methods_Item;
typedef MonoEmbedObject Methods_Factory;
typedef MonoEmbedObject Methods_Collection;
typedef MonoEmbedObject Methods_DuplicateMethods;
typedef MonoEmbedObject Methods_SomeExtensions;
typedef MonoEmbedObject Comparable_Class;
typedef MonoEmbedObject Comparable_Generic;
typedef MonoEmbedObject Comparable_Both;
typedef MonoEmbedObject Comparable_Different;
typedef MonoEmbedObject Fields_Class;
typedef MonoEmbedObject Fields_Struct;
typedef MonoEmbedObject Exceptions_Throwers;
typedef MonoEmbedObject Exceptions_ThrowInStaticCtor;
typedef MonoEmbedObject Exceptions_Base;
typedef MonoEmbedObject Exceptions_Super;
typedef MonoEmbedObject EqualsHashOverrides_Class;
typedef MonoEmbedObject EqualsHashOverrides_EquatableClass;
typedef MonoEmbedObject EqualsHashOverrides_EquatableInt;
typedef MonoEmbedObject Enums_Enumer;
typedef MonoEmbedObject Constructors_Unique;
typedef MonoEmbedObject Constructors_SuperUnique;
typedef MonoEmbedObject Constructors_Implicit;
typedef MonoEmbedObject Constructors_AllTypeCode;
typedef MonoEmbedObject Constructors_DefaultValues;
typedef MonoEmbedObject Constructors_Duplicates;

MONO_EMBEDDINATOR_API BuiltinTypes* BuiltinTypes_new();
MONO_EMBEDDINATOR_API void BuiltinTypes_ReturnsVoid(BuiltinTypes* object);
MONO_EMBEDDINATOR_API bool BuiltinTypes_ReturnsBool(BuiltinTypes* object);
MONO_EMBEDDINATOR_API int8_t BuiltinTypes_ReturnsSByte(BuiltinTypes* object);
MONO_EMBEDDINATOR_API uint8_t BuiltinTypes_ReturnsByte(BuiltinTypes* object);
MONO_EMBEDDINATOR_API int16_t BuiltinTypes_ReturnsShort(BuiltinTypes* object);
MONO_EMBEDDINATOR_API uint16_t BuiltinTypes_ReturnsUShort(BuiltinTypes* object);
MONO_EMBEDDINATOR_API int32_t BuiltinTypes_ReturnsInt(BuiltinTypes* object);
MONO_EMBEDDINATOR_API uint32_t BuiltinTypes_ReturnsUInt(BuiltinTypes* object);
MONO_EMBEDDINATOR_API int64_t BuiltinTypes_ReturnsLong(BuiltinTypes* object);
MONO_EMBEDDINATOR_API uint64_t BuiltinTypes_ReturnsULong(BuiltinTypes* object);
MONO_EMBEDDINATOR_API gunichar2 BuiltinTypes_ReturnsChar(BuiltinTypes* object);
MONO_EMBEDDINATOR_API const char* BuiltinTypes_ReturnsString(BuiltinTypes* object);
MONO_EMBEDDINATOR_API bool BuiltinTypes_PassAndReturnsBool(BuiltinTypes* object, bool v);
MONO_EMBEDDINATOR_API int8_t BuiltinTypes_PassAndReturnsSByte(BuiltinTypes* object, int8_t v);
MONO_EMBEDDINATOR_API uint8_t BuiltinTypes_PassAndReturnsByte(BuiltinTypes* object, uint8_t v);
MONO_EMBEDDINATOR_API int16_t BuiltinTypes_PassAndReturnsShort(BuiltinTypes* object, int16_t v);
MONO_EMBEDDINATOR_API uint16_t BuiltinTypes_PassAndReturnsUShort(BuiltinTypes* object, uint16_t v);
MONO_EMBEDDINATOR_API int32_t BuiltinTypes_PassAndReturnsInt(BuiltinTypes* object, int32_t v);
MONO_EMBEDDINATOR_API uint32_t BuiltinTypes_PassAndReturnsUInt(BuiltinTypes* object, uint32_t v);
MONO_EMBEDDINATOR_API int64_t BuiltinTypes_PassAndReturnsLong(BuiltinTypes* object, int64_t v);
MONO_EMBEDDINATOR_API uint64_t BuiltinTypes_PassAndReturnsULong(BuiltinTypes* object, uint64_t v);
MONO_EMBEDDINATOR_API gunichar2 BuiltinTypes_PassAndReturnsChar(BuiltinTypes* object, gunichar2 v);
MONO_EMBEDDINATOR_API const char* BuiltinTypes_PassAndReturnsString(BuiltinTypes* object, const char* v);
MONO_EMBEDDINATOR_API void BuiltinTypes_PassOutInt(BuiltinTypes* object, int32_t* v);
MONO_EMBEDDINATOR_API void BuiltinTypes_PassRefInt(BuiltinTypes* object, int32_t* v);
MONO_EMBEDDINATOR_API void BuiltinTypes_PassOutString(BuiltinTypes* object, GString* v);
MONO_EMBEDDINATOR_API void BuiltinTypes_PassRefString(BuiltinTypes* object, GString* v);

MONO_EMBEDDINATOR_API ClassWithoutNamespace* ClassWithoutNamespace_new();
MONO_EMBEDDINATOR_API const char* ClassWithoutNamespace_ToString(ClassWithoutNamespace* object);

MONO_EMBEDDINATOR_API bool Platform_get_IsWindows();
MONO_EMBEDDINATOR_API int32_t Platform_get_ExitCode();
MONO_EMBEDDINATOR_API void Platform_set_ExitCode(int32_t value);

MONO_EMBEDDINATOR_API int8_t Type_SByte_get_Max();
MONO_EMBEDDINATOR_API int8_t Type_SByte_get_Min();

MONO_EMBEDDINATOR_API int16_t Type_Int16_get_Max();
MONO_EMBEDDINATOR_API int16_t Type_Int16_get_Min();

MONO_EMBEDDINATOR_API int32_t Type_Int32_get_Max();
MONO_EMBEDDINATOR_API int32_t Type_Int32_get_Min();

MONO_EMBEDDINATOR_API int64_t Type_Int64_get_Max();
MONO_EMBEDDINATOR_API int64_t Type_Int64_get_Min();

MONO_EMBEDDINATOR_API uint8_t Type_Byte_get_Max();
MONO_EMBEDDINATOR_API uint8_t Type_Byte_get_Min();

MONO_EMBEDDINATOR_API uint16_t Type_UInt16_get_Max();
MONO_EMBEDDINATOR_API uint16_t Type_UInt16_get_Min();

MONO_EMBEDDINATOR_API uint32_t Type_UInt32_get_Max();
MONO_EMBEDDINATOR_API uint32_t Type_UInt32_get_Min();

MONO_EMBEDDINATOR_API uint64_t Type_UInt64_get_Max();
MONO_EMBEDDINATOR_API uint64_t Type_UInt64_get_Min();

MONO_EMBEDDINATOR_API float Type_Single_get_Max();
MONO_EMBEDDINATOR_API float Type_Single_get_Min();

MONO_EMBEDDINATOR_API double Type_Double_get_Max();
MONO_EMBEDDINATOR_API double Type_Double_get_Min();

MONO_EMBEDDINATOR_API gunichar2 Type_Char_get_Max();
MONO_EMBEDDINATOR_API gunichar2 Type_Char_get_Min();
MONO_EMBEDDINATOR_API gunichar2 Type_Char_get_Zero();

MONO_EMBEDDINATOR_API const char* Type_String_get_NullString();
MONO_EMBEDDINATOR_API const char* Type_String_get_EmptyString();
MONO_EMBEDDINATOR_API const char* Type_String_get_NonEmptyString();

MONO_EMBEDDINATOR_API MyException* MyException_new();

MONO_EMBEDDINATOR_API MyNextException* MyNextException_new();

MONO_EMBEDDINATOR_API ExposeExtraTypes* ExposeExtraTypes_new();

MONO_EMBEDDINATOR_API Arrays_Arr* Arrays_Arr_new();
MONO_EMBEDDINATOR_API _StringArray Arrays_Arr_StringArrMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _BoolArray Arrays_Arr_BoolArrMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _CharArray Arrays_Arr_CharArrMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _DoubleArray Arrays_Arr_DoubleArrMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _FloatArray Arrays_Arr_FloatArrMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _SignedcharArray Arrays_Arr_SbyteArrMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _ShortArray Arrays_Arr_ShortArrMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _IntArray Arrays_Arr_IntArrMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _LongArray Arrays_Arr_LongArrMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _UnsignedshortArray Arrays_Arr_UshortArrMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _UnsignedintArray Arrays_Arr_UintArrMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _UnsignedlongArray Arrays_Arr_UlongArrMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _UnsignedcharArray Arrays_Arr_ByteArrMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _StringArray Arrays_Arr_get_GetNull(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _StringArray Arrays_Arr_get_StringArr(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _IntArray Arrays_Arr_get_IntArr(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _UnsignedcharArray Arrays_Arr_get_ByteArr(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _StringArray Arrays_Arr_StringArrMethod_1(Arrays_Arr* object, _StringArray strArr);
MONO_EMBEDDINATOR_API _BoolArray Arrays_Arr_BoolArrMethod_1(Arrays_Arr* object, _BoolArray boolArr);
MONO_EMBEDDINATOR_API _CharArray Arrays_Arr_CharArrMethod_1(Arrays_Arr* object, _CharArray charArr);
MONO_EMBEDDINATOR_API _SignedcharArray Arrays_Arr_SbyteArrMethod_1(Arrays_Arr* object, _SignedcharArray sbyteArr);
MONO_EMBEDDINATOR_API _ShortArray Arrays_Arr_ShortArrMethod_1(Arrays_Arr* object, _ShortArray shortArr);
MONO_EMBEDDINATOR_API _IntArray Arrays_Arr_IntArrMethod_1(Arrays_Arr* object, _IntArray intArr);
MONO_EMBEDDINATOR_API _LongArray Arrays_Arr_LongArrMethod_1(Arrays_Arr* object, _LongArray longArr);
MONO_EMBEDDINATOR_API _UnsignedshortArray Arrays_Arr_UshortArrMethod_1(Arrays_Arr* object, _UnsignedshortArray ushortArr);
MONO_EMBEDDINATOR_API _UnsignedintArray Arrays_Arr_UintArrMethod_1(Arrays_Arr* object, _UnsignedintArray uintArr);
MONO_EMBEDDINATOR_API _UnsignedlongArray Arrays_Arr_UlongArrMethod_1(Arrays_Arr* object, _UnsignedlongArray ulongArr);
MONO_EMBEDDINATOR_API _FloatArray Arrays_Arr_FloatArrMethod_1(Arrays_Arr* object, _FloatArray floatArr);
MONO_EMBEDDINATOR_API _DoubleArray Arrays_Arr_DoubleArrMethod_1(Arrays_Arr* object, _DoubleArray doubleArr);
MONO_EMBEDDINATOR_API _UnsignedcharArray Arrays_Arr_ByteArrMethod_1(Arrays_Arr* object, _UnsignedcharArray byteArr);
MONO_EMBEDDINATOR_API _StringArray Arrays_Arr_GetNullMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API _StringArray Arrays_Arr_StringNullArrMethod(Arrays_Arr* object);
MONO_EMBEDDINATOR_API void Arrays_Arr_StringArrRef(Arrays_Arr* object, GString*** strArr);
MONO_EMBEDDINATOR_API void Arrays_Arr_LongArrRef(Arrays_Arr* object, int64_t** longArr);
MONO_EMBEDDINATOR_API void Arrays_Arr_ByteArrRef(Arrays_Arr* object, uint8_t** byteArr);
MONO_EMBEDDINATOR_API int32_t Arrays_Arr_SumByteArray(_UnsignedcharArray array);
MONO_EMBEDDINATOR_API _IntArray Arrays_Arr_ReturnsIntArray();
MONO_EMBEDDINATOR_API _StringArray Arrays_Arr_ReturnsStringArray();

MONO_EMBEDDINATOR_API Arrays_ValueHolder* Arrays_ValueHolder_new(int32_t intValue);
MONO_EMBEDDINATOR_API int32_t Arrays_ValueHolder_get_IntValue(Arrays_ValueHolder* object);

MONO_EMBEDDINATOR_API bool Interfaces_IMakeItUp_get_Boolean(Interfaces_IMakeItUp* object);
MONO_EMBEDDINATOR_API const char* Interfaces_IMakeItUp_Convert(Interfaces_IMakeItUp* object, int32_t integer);
MONO_EMBEDDINATOR_API const char* Interfaces_IMakeItUp_Convert_1(Interfaces_IMakeItUp* object, int64_t longint);

MONO_EMBEDDINATOR_API Interfaces_IMakeItUp* Interfaces_Supplier_Create();

MONO_EMBEDDINATOR_API int32_t Interfaces_IOperations_AddInt(Interfaces_IOperations* object, int32_t a, int32_t b);

MONO_EMBEDDINATOR_API Interfaces_ManagedAdder* Interfaces_ManagedAdder_new();
MONO_EMBEDDINATOR_API int32_t Interfaces_ManagedAdder_AddInt(Interfaces_ManagedAdder* object, int32_t a, int32_t b);

MONO_EMBEDDINATOR_API Interfaces_OpConsumer* Interfaces_OpConsumer_new();
MONO_EMBEDDINATOR_API int32_t Interfaces_OpConsumer_DoAddition(Interfaces_IOperations* ops, int32_t a, int32_t b);
MONO_EMBEDDINATOR_API bool Interfaces_OpConsumer_TestManagedAdder(int32_t a, int32_t b);

MONO_EMBEDDINATOR_API Interfaces_ExposeIFormatProvider* Interfaces_ExposeIFormatProvider_new();

MONO_EMBEDDINATOR_API NestedClasses_ParentClass* NestedClasses_ParentClass_new();
MONO_EMBEDDINATOR_API NestedClasses_NestedClass* NestedClasses_ParentClass_get_Nested(NestedClasses_ParentClass* object);
MONO_EMBEDDINATOR_API void NestedClasses_ParentClass_set_Nested(NestedClasses_ParentClass* object, NestedClasses_NestedClass* value);
MONO_EMBEDDINATOR_API int32_t NestedClasses_ParentClass_AddNumbers(NestedClasses_ParentClass* object, int32_t x, int32_t y);
MONO_EMBEDDINATOR_API int32_t NestedClasses_ParentClass_get_Sum(NestedClasses_ParentClass* object);

MONO_EMBEDDINATOR_API NestedClasses_NestedClass* NestedClasses_NestedClass_new();
MONO_EMBEDDINATOR_API int32_t NestedClasses_NestedClass_Addition(NestedClasses_NestedClass* object, int32_t x, int32_t y);
MONO_EMBEDDINATOR_API int32_t NestedClasses_NestedClass_get_X(NestedClasses_NestedClass* object);
MONO_EMBEDDINATOR_API void NestedClasses_NestedClass_set_X(NestedClasses_NestedClass* object, int32_t value);
MONO_EMBEDDINATOR_API int32_t NestedClasses_NestedClass_get_Y(NestedClasses_NestedClass* object);
MONO_EMBEDDINATOR_API void NestedClasses_NestedClass_set_Y(NestedClasses_NestedClass* object, int32_t value);
MONO_EMBEDDINATOR_API int32_t NestedClasses_NestedClass_get_Sum(NestedClasses_NestedClass* object);
MONO_EMBEDDINATOR_API void NestedClasses_NestedClass_set_Sum(NestedClasses_NestedClass* object, int32_t value);

MONO_EMBEDDINATOR_API Overloads_OperatorCollision* Overloads_OperatorCollision_new(int32_t val);
MONO_EMBEDDINATOR_API int32_t Overloads_OperatorCollision_get_Value(Overloads_OperatorCollision* object);
MONO_EMBEDDINATOR_API Overloads_OperatorCollision* Overloads_OperatorCollision_op_Addition(Overloads_OperatorCollision* c1, Overloads_OperatorCollision* c2);
MONO_EMBEDDINATOR_API Overloads_OperatorCollision* Overloads_OperatorCollision_Add(Overloads_OperatorCollision* c1, Overloads_OperatorCollision* c2);
MONO_EMBEDDINATOR_API Overloads_OperatorCollision* Overloads_OperatorCollision_op_Subtraction(Overloads_OperatorCollision* c1, Overloads_OperatorCollision* c2);
MONO_EMBEDDINATOR_API Overloads_OperatorCollision* Overloads_OperatorCollision_Multiply(Overloads_OperatorCollision* c1, Overloads_OperatorCollision* c2);

MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_new(int32_t val);
MONO_EMBEDDINATOR_API int32_t Overloads_AllOperators_get_Value(Overloads_AllOperators* object);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_Addition(Overloads_AllOperators* c1, Overloads_AllOperators* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_Subtraction(Overloads_AllOperators* c1, Overloads_AllOperators* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_Multiply(Overloads_AllOperators* c1, Overloads_AllOperators* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_Division(Overloads_AllOperators* c1, Overloads_AllOperators* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_Division_1(Overloads_AllOperators* c1, int32_t c2);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_Division_2(int32_t c1, Overloads_AllOperators* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_Division_3(Overloads_AllOperators* c1, int64_t c2);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_ExclusiveOr(Overloads_AllOperators* c1, Overloads_AllOperators* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_BitwiseOr(Overloads_AllOperators* c1, Overloads_AllOperators* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_BitwiseAnd(Overloads_AllOperators* c1, Overloads_AllOperators* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_BitwiseAnd_1(Overloads_AllOperators* c1, int32_t c2);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_Increment(Overloads_AllOperators* c1);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_Decrement(Overloads_AllOperators* c1);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_RightShift(Overloads_AllOperators* c1, int32_t a);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_LeftShift(Overloads_AllOperators* c1, int32_t a);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_OnesComplement(Overloads_AllOperators* c1);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_UnaryPlus(Overloads_AllOperators* c1);
MONO_EMBEDDINATOR_API Overloads_AllOperators* Overloads_AllOperators_op_UnaryNegation(Overloads_AllOperators* c1);

MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_new(int32_t val);
MONO_EMBEDDINATOR_API int32_t Overloads_AllOperatorsWithFriendly_get_Value(Overloads_AllOperatorsWithFriendly* object);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_op_Addition(Overloads_AllOperatorsWithFriendly* c1, Overloads_AllOperatorsWithFriendly* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_Add(Overloads_AllOperatorsWithFriendly* c1, Overloads_AllOperatorsWithFriendly* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_op_Subtraction(Overloads_AllOperatorsWithFriendly* c1, Overloads_AllOperatorsWithFriendly* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_Subtract(Overloads_AllOperatorsWithFriendly* c1, Overloads_AllOperatorsWithFriendly* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_op_Multiply(Overloads_AllOperatorsWithFriendly* c1, Overloads_AllOperatorsWithFriendly* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_Multiply(Overloads_AllOperatorsWithFriendly* c1, Overloads_AllOperatorsWithFriendly* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_op_Division(Overloads_AllOperatorsWithFriendly* c1, Overloads_AllOperatorsWithFriendly* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_Divide(Overloads_AllOperatorsWithFriendly* c1, Overloads_AllOperatorsWithFriendly* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_op_ExclusiveOr(Overloads_AllOperatorsWithFriendly* c1, Overloads_AllOperatorsWithFriendly* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_Xor(Overloads_AllOperatorsWithFriendly* c1, Overloads_AllOperatorsWithFriendly* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_op_BitwiseOr(Overloads_AllOperatorsWithFriendly* c1, Overloads_AllOperatorsWithFriendly* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_BitwiseOr(Overloads_AllOperatorsWithFriendly* c1, Overloads_AllOperatorsWithFriendly* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_op_BitwiseAnd(Overloads_AllOperatorsWithFriendly* c1, Overloads_AllOperatorsWithFriendly* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_BitwiseAnd(Overloads_AllOperatorsWithFriendly* c1, Overloads_AllOperatorsWithFriendly* c2);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_op_Increment(Overloads_AllOperatorsWithFriendly* c1);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_Increment(Overloads_AllOperatorsWithFriendly* c1);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_op_Decrement(Overloads_AllOperatorsWithFriendly* c1);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_Decrement(Overloads_AllOperatorsWithFriendly* c1);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_op_RightShift(Overloads_AllOperatorsWithFriendly* c1, int32_t a);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_RightShift(Overloads_AllOperatorsWithFriendly* c1, int32_t a);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_op_LeftShift(Overloads_AllOperatorsWithFriendly* c1, int32_t a);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_LeftShift(Overloads_AllOperatorsWithFriendly* c1, int32_t a);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_op_OnesComplement(Overloads_AllOperatorsWithFriendly* c1);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_OnesComplement(Overloads_AllOperatorsWithFriendly* c1);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_op_UnaryPlus(Overloads_AllOperatorsWithFriendly* c1);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_Plus(Overloads_AllOperatorsWithFriendly* c1);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_Negate(Overloads_AllOperatorsWithFriendly* c1);
MONO_EMBEDDINATOR_API Overloads_AllOperatorsWithFriendly* Overloads_AllOperatorsWithFriendly_op_UnaryNegation(Overloads_AllOperatorsWithFriendly* c1);

MONO_EMBEDDINATOR_API Overloads_EqualOverrides* Overloads_EqualOverrides_new(int32_t val);
MONO_EMBEDDINATOR_API int32_t Overloads_EqualOverrides_get_Value(Overloads_EqualOverrides* object);
MONO_EMBEDDINATOR_API bool Overloads_EqualOverrides_op_Equality(Overloads_EqualOverrides* a, Overloads_EqualOverrides* b);
MONO_EMBEDDINATOR_API bool Overloads_EqualOverrides_op_Inequality(Overloads_EqualOverrides* a, Overloads_EqualOverrides* b);

MONO_EMBEDDINATOR_API Overloads_ConflictingNamingOverload* Overloads_ConflictingNamingOverload_new();
MONO_EMBEDDINATOR_API const char* Overloads_ConflictingNamingOverload_Format(_StringArray values);
MONO_EMBEDDINATOR_API const char* Overloads_ConflictingNamingOverload_Format_1(_IntArray values);

MONO_EMBEDDINATOR_API ShortParameters_Class* ShortParameters_Class_new();
MONO_EMBEDDINATOR_API int32_t ShortParameters_Class_get_X(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_X(ShortParameters_Class* object, int32_t value);
MONO_EMBEDDINATOR_API int32_t ShortParameters_Class_get_Y(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_Y(ShortParameters_Class* object, int32_t value);
MONO_EMBEDDINATOR_API const char* ShortParameters_Class_get_A(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_A(ShortParameters_Class* object, const char* value);
MONO_EMBEDDINATOR_API const char* ShortParameters_Class_get_B(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_B(ShortParameters_Class* object, const char* value);
MONO_EMBEDDINATOR_API double ShortParameters_Class_get_C(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_C(ShortParameters_Class* object, double value);
MONO_EMBEDDINATOR_API double ShortParameters_Class_get_D(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_D(ShortParameters_Class* object, double value);
MONO_EMBEDDINATOR_API float ShortParameters_Class_get_E(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_E(ShortParameters_Class* object, float value);
MONO_EMBEDDINATOR_API float ShortParameters_Class_get_F(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_F(ShortParameters_Class* object, float value);
MONO_EMBEDDINATOR_API uint32_t ShortParameters_Class_get_G(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_G(ShortParameters_Class* object, uint32_t value);
MONO_EMBEDDINATOR_API uint32_t ShortParameters_Class_get_H(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_H(ShortParameters_Class* object, uint32_t value);
MONO_EMBEDDINATOR_API int16_t ShortParameters_Class_get_I(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_I(ShortParameters_Class* object, int16_t value);
MONO_EMBEDDINATOR_API int16_t ShortParameters_Class_get_J(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_J(ShortParameters_Class* object, int16_t value);
MONO_EMBEDDINATOR_API uint16_t ShortParameters_Class_get_K(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_K(ShortParameters_Class* object, uint16_t value);
MONO_EMBEDDINATOR_API uint16_t ShortParameters_Class_get_L(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_L(ShortParameters_Class* object, uint16_t value);
MONO_EMBEDDINATOR_API int64_t ShortParameters_Class_get_M(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_M(ShortParameters_Class* object, int64_t value);
MONO_EMBEDDINATOR_API int64_t ShortParameters_Class_get_N(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_N(ShortParameters_Class* object, int64_t value);
MONO_EMBEDDINATOR_API uint64_t ShortParameters_Class_get_O(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_O(ShortParameters_Class* object, uint64_t value);
MONO_EMBEDDINATOR_API uint64_t ShortParameters_Class_get_P(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_P(ShortParameters_Class* object, uint64_t value);
MONO_EMBEDDINATOR_API gunichar2 ShortParameters_Class_get_Q(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_Q(ShortParameters_Class* object, gunichar2 value);
MONO_EMBEDDINATOR_API gunichar2 ShortParameters_Class_get_R(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_R(ShortParameters_Class* object, gunichar2 value);
MONO_EMBEDDINATOR_API bool ShortParameters_Class_get_S(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_S(ShortParameters_Class* object, bool value);
MONO_EMBEDDINATOR_API bool ShortParameters_Class_get_T(ShortParameters_Class* object);
MONO_EMBEDDINATOR_API void ShortParameters_Class_set_T(ShortParameters_Class* object, bool value);
MONO_EMBEDDINATOR_API bool ShortParameters_Class_NoDuplicateTypes(ShortParameters_Class* object, const char* a, double c, float e, uint32_t g, int16_t i, uint16_t k, int64_t m, uint64_t o, gunichar2 q, bool s);
MONO_EMBEDDINATOR_API int32_t ShortParameters_Class_TwoInt(ShortParameters_Class* object, int32_t x, int32_t y);
MONO_EMBEDDINATOR_API const char* ShortParameters_Class_TwoString(ShortParameters_Class* object, const char* a, const char* b);
MONO_EMBEDDINATOR_API double ShortParameters_Class_TwoDouble(ShortParameters_Class* object, double c, double d);
MONO_EMBEDDINATOR_API float ShortParameters_Class_TwoFloat(ShortParameters_Class* object, float e, float f);
MONO_EMBEDDINATOR_API uint32_t ShortParameters_Class_TwoUint(ShortParameters_Class* object, uint32_t g, uint32_t h);
MONO_EMBEDDINATOR_API int32_t ShortParameters_Class_TwoShort(ShortParameters_Class* object, int16_t i, int16_t j);
MONO_EMBEDDINATOR_API int32_t ShortParameters_Class_TwoUshort(ShortParameters_Class* object, uint16_t k, uint16_t l);
MONO_EMBEDDINATOR_API int64_t ShortParameters_Class_TwoLong(ShortParameters_Class* object, int64_t m, int64_t n);
MONO_EMBEDDINATOR_API uint64_t ShortParameters_Class_TwoUlong(ShortParameters_Class* object, uint64_t o, uint64_t p);
MONO_EMBEDDINATOR_API int32_t ShortParameters_Class_TwoChar(ShortParameters_Class* object, gunichar2 q, gunichar2 r);
MONO_EMBEDDINATOR_API bool ShortParameters_Class_TwoBool(ShortParameters_Class* object, bool s, bool t);

MONO_EMBEDDINATOR_API Subscripts_BoolCollection* Subscripts_BoolCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_BoolCollection_Add(Subscripts_BoolCollection* object, bool item);
MONO_EMBEDDINATOR_API void Subscripts_BoolCollection_Remove(Subscripts_BoolCollection* object, bool item);
MONO_EMBEDDINATOR_API int32_t Subscripts_BoolCollection_get_Count(Subscripts_BoolCollection* object);
MONO_EMBEDDINATOR_API bool Subscripts_BoolCollection_get_Item(Subscripts_BoolCollection* object, int32_t index);
MONO_EMBEDDINATOR_API void Subscripts_BoolCollection_set_Item(Subscripts_BoolCollection* object, int32_t index, bool value);

MONO_EMBEDDINATOR_API Subscripts_BoolDictionaryCollection* Subscripts_BoolDictionaryCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_BoolDictionaryCollection_Add(Subscripts_BoolDictionaryCollection* object, const char* key, bool item);
MONO_EMBEDDINATOR_API void Subscripts_BoolDictionaryCollection_Remove(Subscripts_BoolDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API int32_t Subscripts_BoolDictionaryCollection_get_Count(Subscripts_BoolDictionaryCollection* object);
MONO_EMBEDDINATOR_API bool Subscripts_BoolDictionaryCollection_get_Item(Subscripts_BoolDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API void Subscripts_BoolDictionaryCollection_set_Item(Subscripts_BoolDictionaryCollection* object, const char* key, bool value);

MONO_EMBEDDINATOR_API Subscripts_SbyteCollection* Subscripts_SbyteCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_SbyteCollection_Add(Subscripts_SbyteCollection* object, int8_t item);
MONO_EMBEDDINATOR_API void Subscripts_SbyteCollection_Remove(Subscripts_SbyteCollection* object, int8_t item);
MONO_EMBEDDINATOR_API int32_t Subscripts_SbyteCollection_get_Count(Subscripts_SbyteCollection* object);
MONO_EMBEDDINATOR_API int8_t Subscripts_SbyteCollection_get_Item(Subscripts_SbyteCollection* object, int32_t index);
MONO_EMBEDDINATOR_API void Subscripts_SbyteCollection_set_Item(Subscripts_SbyteCollection* object, int32_t index, int8_t value);

MONO_EMBEDDINATOR_API Subscripts_SbyteDictionaryCollection* Subscripts_SbyteDictionaryCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_SbyteDictionaryCollection_Add(Subscripts_SbyteDictionaryCollection* object, const char* key, int8_t item);
MONO_EMBEDDINATOR_API void Subscripts_SbyteDictionaryCollection_Remove(Subscripts_SbyteDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API int32_t Subscripts_SbyteDictionaryCollection_get_Count(Subscripts_SbyteDictionaryCollection* object);
MONO_EMBEDDINATOR_API int8_t Subscripts_SbyteDictionaryCollection_get_Item(Subscripts_SbyteDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API void Subscripts_SbyteDictionaryCollection_set_Item(Subscripts_SbyteDictionaryCollection* object, const char* key, int8_t value);

MONO_EMBEDDINATOR_API Subscripts_ByteCollection* Subscripts_ByteCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_ByteCollection_Add(Subscripts_ByteCollection* object, uint8_t item);
MONO_EMBEDDINATOR_API void Subscripts_ByteCollection_Remove(Subscripts_ByteCollection* object, uint8_t item);
MONO_EMBEDDINATOR_API int32_t Subscripts_ByteCollection_get_Count(Subscripts_ByteCollection* object);
MONO_EMBEDDINATOR_API uint8_t Subscripts_ByteCollection_get_Item(Subscripts_ByteCollection* object, int32_t index);
MONO_EMBEDDINATOR_API void Subscripts_ByteCollection_set_Item(Subscripts_ByteCollection* object, int32_t index, uint8_t value);

MONO_EMBEDDINATOR_API Subscripts_ByteDictionaryCollection* Subscripts_ByteDictionaryCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_ByteDictionaryCollection_Add(Subscripts_ByteDictionaryCollection* object, const char* key, uint8_t item);
MONO_EMBEDDINATOR_API void Subscripts_ByteDictionaryCollection_Remove(Subscripts_ByteDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API int32_t Subscripts_ByteDictionaryCollection_get_Count(Subscripts_ByteDictionaryCollection* object);
MONO_EMBEDDINATOR_API uint8_t Subscripts_ByteDictionaryCollection_get_Item(Subscripts_ByteDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API void Subscripts_ByteDictionaryCollection_set_Item(Subscripts_ByteDictionaryCollection* object, const char* key, uint8_t value);

MONO_EMBEDDINATOR_API Subscripts_ShortCollection* Subscripts_ShortCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_ShortCollection_Add(Subscripts_ShortCollection* object, int16_t item);
MONO_EMBEDDINATOR_API void Subscripts_ShortCollection_Remove(Subscripts_ShortCollection* object, int16_t item);
MONO_EMBEDDINATOR_API int32_t Subscripts_ShortCollection_get_Count(Subscripts_ShortCollection* object);
MONO_EMBEDDINATOR_API int16_t Subscripts_ShortCollection_get_Item(Subscripts_ShortCollection* object, int32_t index);
MONO_EMBEDDINATOR_API void Subscripts_ShortCollection_set_Item(Subscripts_ShortCollection* object, int32_t index, int16_t value);

MONO_EMBEDDINATOR_API Subscripts_ShortDictionaryCollection* Subscripts_ShortDictionaryCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_ShortDictionaryCollection_Add(Subscripts_ShortDictionaryCollection* object, const char* key, int16_t item);
MONO_EMBEDDINATOR_API void Subscripts_ShortDictionaryCollection_Remove(Subscripts_ShortDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API int32_t Subscripts_ShortDictionaryCollection_get_Count(Subscripts_ShortDictionaryCollection* object);
MONO_EMBEDDINATOR_API int16_t Subscripts_ShortDictionaryCollection_get_Item(Subscripts_ShortDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API void Subscripts_ShortDictionaryCollection_set_Item(Subscripts_ShortDictionaryCollection* object, const char* key, int16_t value);

MONO_EMBEDDINATOR_API Subscripts_UshortCollection* Subscripts_UshortCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_UshortCollection_Add(Subscripts_UshortCollection* object, uint16_t item);
MONO_EMBEDDINATOR_API void Subscripts_UshortCollection_Remove(Subscripts_UshortCollection* object, uint16_t item);
MONO_EMBEDDINATOR_API int32_t Subscripts_UshortCollection_get_Count(Subscripts_UshortCollection* object);
MONO_EMBEDDINATOR_API uint16_t Subscripts_UshortCollection_get_Item(Subscripts_UshortCollection* object, int32_t index);
MONO_EMBEDDINATOR_API void Subscripts_UshortCollection_set_Item(Subscripts_UshortCollection* object, int32_t index, uint16_t value);

MONO_EMBEDDINATOR_API Subscripts_UshortDictionaryCollection* Subscripts_UshortDictionaryCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_UshortDictionaryCollection_Add(Subscripts_UshortDictionaryCollection* object, const char* key, uint16_t item);
MONO_EMBEDDINATOR_API void Subscripts_UshortDictionaryCollection_Remove(Subscripts_UshortDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API int32_t Subscripts_UshortDictionaryCollection_get_Count(Subscripts_UshortDictionaryCollection* object);
MONO_EMBEDDINATOR_API uint16_t Subscripts_UshortDictionaryCollection_get_Item(Subscripts_UshortDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API void Subscripts_UshortDictionaryCollection_set_Item(Subscripts_UshortDictionaryCollection* object, const char* key, uint16_t value);

MONO_EMBEDDINATOR_API Subscripts_IntCollection* Subscripts_IntCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_IntCollection_Add(Subscripts_IntCollection* object, int32_t item);
MONO_EMBEDDINATOR_API void Subscripts_IntCollection_Remove(Subscripts_IntCollection* object, int32_t item);
MONO_EMBEDDINATOR_API int32_t Subscripts_IntCollection_get_Count(Subscripts_IntCollection* object);
MONO_EMBEDDINATOR_API int32_t Subscripts_IntCollection_get_Item(Subscripts_IntCollection* object, int32_t index);
MONO_EMBEDDINATOR_API void Subscripts_IntCollection_set_Item(Subscripts_IntCollection* object, int32_t index, int32_t value);

MONO_EMBEDDINATOR_API Subscripts_IntDictionaryCollection* Subscripts_IntDictionaryCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_IntDictionaryCollection_Add(Subscripts_IntDictionaryCollection* object, const char* key, int32_t item);
MONO_EMBEDDINATOR_API void Subscripts_IntDictionaryCollection_Remove(Subscripts_IntDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API int32_t Subscripts_IntDictionaryCollection_get_Count(Subscripts_IntDictionaryCollection* object);
MONO_EMBEDDINATOR_API int32_t Subscripts_IntDictionaryCollection_get_Item(Subscripts_IntDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API void Subscripts_IntDictionaryCollection_set_Item(Subscripts_IntDictionaryCollection* object, const char* key, int32_t value);

MONO_EMBEDDINATOR_API Subscripts_UintCollection* Subscripts_UintCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_UintCollection_Add(Subscripts_UintCollection* object, uint32_t item);
MONO_EMBEDDINATOR_API void Subscripts_UintCollection_Remove(Subscripts_UintCollection* object, uint32_t item);
MONO_EMBEDDINATOR_API int32_t Subscripts_UintCollection_get_Count(Subscripts_UintCollection* object);
MONO_EMBEDDINATOR_API uint32_t Subscripts_UintCollection_get_Item(Subscripts_UintCollection* object, int32_t index);
MONO_EMBEDDINATOR_API void Subscripts_UintCollection_set_Item(Subscripts_UintCollection* object, int32_t index, uint32_t value);

MONO_EMBEDDINATOR_API Subscripts_UintDictionaryCollection* Subscripts_UintDictionaryCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_UintDictionaryCollection_Add(Subscripts_UintDictionaryCollection* object, const char* key, uint32_t item);
MONO_EMBEDDINATOR_API void Subscripts_UintDictionaryCollection_Remove(Subscripts_UintDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API int32_t Subscripts_UintDictionaryCollection_get_Count(Subscripts_UintDictionaryCollection* object);
MONO_EMBEDDINATOR_API uint32_t Subscripts_UintDictionaryCollection_get_Item(Subscripts_UintDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API void Subscripts_UintDictionaryCollection_set_Item(Subscripts_UintDictionaryCollection* object, const char* key, uint32_t value);

MONO_EMBEDDINATOR_API Subscripts_LongCollection* Subscripts_LongCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_LongCollection_Add(Subscripts_LongCollection* object, int64_t item);
MONO_EMBEDDINATOR_API void Subscripts_LongCollection_Remove(Subscripts_LongCollection* object, int64_t item);
MONO_EMBEDDINATOR_API int32_t Subscripts_LongCollection_get_Count(Subscripts_LongCollection* object);
MONO_EMBEDDINATOR_API int64_t Subscripts_LongCollection_get_Item(Subscripts_LongCollection* object, int32_t index);
MONO_EMBEDDINATOR_API void Subscripts_LongCollection_set_Item(Subscripts_LongCollection* object, int32_t index, int64_t value);

MONO_EMBEDDINATOR_API Subscripts_LongDictionaryCollection* Subscripts_LongDictionaryCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_LongDictionaryCollection_Add(Subscripts_LongDictionaryCollection* object, const char* key, int64_t item);
MONO_EMBEDDINATOR_API void Subscripts_LongDictionaryCollection_Remove(Subscripts_LongDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API int32_t Subscripts_LongDictionaryCollection_get_Count(Subscripts_LongDictionaryCollection* object);
MONO_EMBEDDINATOR_API int64_t Subscripts_LongDictionaryCollection_get_Item(Subscripts_LongDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API void Subscripts_LongDictionaryCollection_set_Item(Subscripts_LongDictionaryCollection* object, const char* key, int64_t value);

MONO_EMBEDDINATOR_API Subscripts_UlongCollection* Subscripts_UlongCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_UlongCollection_Add(Subscripts_UlongCollection* object, uint64_t item);
MONO_EMBEDDINATOR_API void Subscripts_UlongCollection_Remove(Subscripts_UlongCollection* object, uint64_t item);
MONO_EMBEDDINATOR_API int32_t Subscripts_UlongCollection_get_Count(Subscripts_UlongCollection* object);
MONO_EMBEDDINATOR_API uint64_t Subscripts_UlongCollection_get_Item(Subscripts_UlongCollection* object, int32_t index);
MONO_EMBEDDINATOR_API void Subscripts_UlongCollection_set_Item(Subscripts_UlongCollection* object, int32_t index, uint64_t value);

MONO_EMBEDDINATOR_API Subscripts_UlongDictionaryCollection* Subscripts_UlongDictionaryCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_UlongDictionaryCollection_Add(Subscripts_UlongDictionaryCollection* object, const char* key, uint64_t item);
MONO_EMBEDDINATOR_API void Subscripts_UlongDictionaryCollection_Remove(Subscripts_UlongDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API int32_t Subscripts_UlongDictionaryCollection_get_Count(Subscripts_UlongDictionaryCollection* object);
MONO_EMBEDDINATOR_API uint64_t Subscripts_UlongDictionaryCollection_get_Item(Subscripts_UlongDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API void Subscripts_UlongDictionaryCollection_set_Item(Subscripts_UlongDictionaryCollection* object, const char* key, uint64_t value);

MONO_EMBEDDINATOR_API Subscripts_FloatCollection* Subscripts_FloatCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_FloatCollection_Add(Subscripts_FloatCollection* object, float item);
MONO_EMBEDDINATOR_API void Subscripts_FloatCollection_Remove(Subscripts_FloatCollection* object, float item);
MONO_EMBEDDINATOR_API int32_t Subscripts_FloatCollection_get_Count(Subscripts_FloatCollection* object);
MONO_EMBEDDINATOR_API float Subscripts_FloatCollection_get_Item(Subscripts_FloatCollection* object, int32_t index);
MONO_EMBEDDINATOR_API void Subscripts_FloatCollection_set_Item(Subscripts_FloatCollection* object, int32_t index, float value);

MONO_EMBEDDINATOR_API Subscripts_FloatDictionaryCollection* Subscripts_FloatDictionaryCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_FloatDictionaryCollection_Add(Subscripts_FloatDictionaryCollection* object, const char* key, float item);
MONO_EMBEDDINATOR_API void Subscripts_FloatDictionaryCollection_Remove(Subscripts_FloatDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API int32_t Subscripts_FloatDictionaryCollection_get_Count(Subscripts_FloatDictionaryCollection* object);
MONO_EMBEDDINATOR_API float Subscripts_FloatDictionaryCollection_get_Item(Subscripts_FloatDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API void Subscripts_FloatDictionaryCollection_set_Item(Subscripts_FloatDictionaryCollection* object, const char* key, float value);

MONO_EMBEDDINATOR_API Subscripts_DoubleCollection* Subscripts_DoubleCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_DoubleCollection_Add(Subscripts_DoubleCollection* object, double item);
MONO_EMBEDDINATOR_API void Subscripts_DoubleCollection_Remove(Subscripts_DoubleCollection* object, double item);
MONO_EMBEDDINATOR_API int32_t Subscripts_DoubleCollection_get_Count(Subscripts_DoubleCollection* object);
MONO_EMBEDDINATOR_API double Subscripts_DoubleCollection_get_Item(Subscripts_DoubleCollection* object, int32_t index);
MONO_EMBEDDINATOR_API void Subscripts_DoubleCollection_set_Item(Subscripts_DoubleCollection* object, int32_t index, double value);

MONO_EMBEDDINATOR_API Subscripts_DoubleDictionaryCollection* Subscripts_DoubleDictionaryCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_DoubleDictionaryCollection_Add(Subscripts_DoubleDictionaryCollection* object, const char* key, double item);
MONO_EMBEDDINATOR_API void Subscripts_DoubleDictionaryCollection_Remove(Subscripts_DoubleDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API int32_t Subscripts_DoubleDictionaryCollection_get_Count(Subscripts_DoubleDictionaryCollection* object);
MONO_EMBEDDINATOR_API double Subscripts_DoubleDictionaryCollection_get_Item(Subscripts_DoubleDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API void Subscripts_DoubleDictionaryCollection_set_Item(Subscripts_DoubleDictionaryCollection* object, const char* key, double value);

MONO_EMBEDDINATOR_API Subscripts_CharCollection* Subscripts_CharCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_CharCollection_Add(Subscripts_CharCollection* object, gunichar2 item);
MONO_EMBEDDINATOR_API void Subscripts_CharCollection_Remove(Subscripts_CharCollection* object, gunichar2 item);
MONO_EMBEDDINATOR_API int32_t Subscripts_CharCollection_get_Count(Subscripts_CharCollection* object);
MONO_EMBEDDINATOR_API gunichar2 Subscripts_CharCollection_get_Item(Subscripts_CharCollection* object, int32_t index);
MONO_EMBEDDINATOR_API void Subscripts_CharCollection_set_Item(Subscripts_CharCollection* object, int32_t index, gunichar2 value);

MONO_EMBEDDINATOR_API Subscripts_CharDictionaryCollection* Subscripts_CharDictionaryCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_CharDictionaryCollection_Add(Subscripts_CharDictionaryCollection* object, const char* key, gunichar2 item);
MONO_EMBEDDINATOR_API void Subscripts_CharDictionaryCollection_Remove(Subscripts_CharDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API int32_t Subscripts_CharDictionaryCollection_get_Count(Subscripts_CharDictionaryCollection* object);
MONO_EMBEDDINATOR_API gunichar2 Subscripts_CharDictionaryCollection_get_Item(Subscripts_CharDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API void Subscripts_CharDictionaryCollection_set_Item(Subscripts_CharDictionaryCollection* object, const char* key, gunichar2 value);

MONO_EMBEDDINATOR_API Subscripts_StringCollection* Subscripts_StringCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_StringCollection_Add(Subscripts_StringCollection* object, const char* item);
MONO_EMBEDDINATOR_API void Subscripts_StringCollection_Remove(Subscripts_StringCollection* object, const char* item);
MONO_EMBEDDINATOR_API int32_t Subscripts_StringCollection_get_Count(Subscripts_StringCollection* object);
MONO_EMBEDDINATOR_API const char* Subscripts_StringCollection_get_Item(Subscripts_StringCollection* object, int32_t index);
MONO_EMBEDDINATOR_API void Subscripts_StringCollection_set_Item(Subscripts_StringCollection* object, int32_t index, const char* value);

MONO_EMBEDDINATOR_API Subscripts_StringDictionaryCollection* Subscripts_StringDictionaryCollection_new();
MONO_EMBEDDINATOR_API void Subscripts_StringDictionaryCollection_Add(Subscripts_StringDictionaryCollection* object, const char* key, const char* item);
MONO_EMBEDDINATOR_API void Subscripts_StringDictionaryCollection_Remove(Subscripts_StringDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API int32_t Subscripts_StringDictionaryCollection_get_Count(Subscripts_StringDictionaryCollection* object);
MONO_EMBEDDINATOR_API const char* Subscripts_StringDictionaryCollection_get_Item(Subscripts_StringDictionaryCollection* object, const char* key);
MONO_EMBEDDINATOR_API void Subscripts_StringDictionaryCollection_set_Item(Subscripts_StringDictionaryCollection* object, const char* key, const char* value);

MONO_EMBEDDINATOR_API Subscripts_IntCollectionNoSetter* Subscripts_IntCollectionNoSetter_new();
MONO_EMBEDDINATOR_API int32_t Subscripts_IntCollectionNoSetter_get_Item(Subscripts_IntCollectionNoSetter* object, int32_t index);

MONO_EMBEDDINATOR_API Subscripts_IntCollectionNoGetter* Subscripts_IntCollectionNoGetter_new();
MONO_EMBEDDINATOR_API void Subscripts_IntCollectionNoGetter_set_Item(Subscripts_IntCollectionNoGetter* object, int32_t index, int32_t value);

MONO_EMBEDDINATOR_API Structs_Point* Structs_Point_new(float x, float y);
MONO_EMBEDDINATOR_API float Structs_Point_get_X(Structs_Point* object);
MONO_EMBEDDINATOR_API float Structs_Point_get_Y(Structs_Point* object);
MONO_EMBEDDINATOR_API bool Structs_Point_op_Equality(Structs_Point* left, Structs_Point* right);
MONO_EMBEDDINATOR_API bool Structs_Point_op_Inequality(Structs_Point* left, Structs_Point* right);
MONO_EMBEDDINATOR_API Structs_Point* Structs_Point_op_Addition(Structs_Point* left, Structs_Point* right);
MONO_EMBEDDINATOR_API Structs_Point* Structs_Point_op_Subtraction(Structs_Point* left, Structs_Point* right);
MONO_EMBEDDINATOR_API Structs_Point* Structs_Point_get_Zero();
MONO_EMBEDDINATOR_API void Structs_Point_set_Zero(Structs_Point* value);

MONO_EMBEDDINATOR_API Properties_Query* Properties_Query_new();
MONO_EMBEDDINATOR_API int32_t Properties_Query_get_UniversalAnswer();
MONO_EMBEDDINATOR_API bool Properties_Query_get_IsGood(Properties_Query* object);
MONO_EMBEDDINATOR_API bool Properties_Query_get_IsBad(Properties_Query* object);
MONO_EMBEDDINATOR_API int32_t Properties_Query_get_Answer(Properties_Query* object);
MONO_EMBEDDINATOR_API void Properties_Query_set_Answer(Properties_Query* object, int32_t value);
MONO_EMBEDDINATOR_API void Properties_Query_set_Secret(Properties_Query* object, int32_t value);
MONO_EMBEDDINATOR_API bool Properties_Query_get_IsSecret(Properties_Query* object);

MONO_EMBEDDINATOR_API Properties_DuplicateIndexedProperties* Properties_DuplicateIndexedProperties_new();
MONO_EMBEDDINATOR_API int32_t Properties_DuplicateIndexedProperties_get_Item(Properties_DuplicateIndexedProperties* object, int32_t i);
MONO_EMBEDDINATOR_API int32_t Properties_DuplicateIndexedProperties_get_Item_1(Properties_DuplicateIndexedProperties* object, const char* i);

MONO_EMBEDDINATOR_API First_ClassWithSingleNamespace* First_ClassWithSingleNamespace_new();
MONO_EMBEDDINATOR_API const char* First_ClassWithSingleNamespace_ToString(First_ClassWithSingleNamespace* object);

MONO_EMBEDDINATOR_API First_Second_ClassWithNestedNamespace* First_Second_ClassWithNestedNamespace_new();
MONO_EMBEDDINATOR_API const char* First_Second_ClassWithNestedNamespace_ToString(First_Second_ClassWithNestedNamespace* object);

MONO_EMBEDDINATOR_API First_Second_Third_ClassWithNestedNamespace* First_Second_Third_ClassWithNestedNamespace_new();
MONO_EMBEDDINATOR_API const char* First_Second_Third_ClassWithNestedNamespace_ToString(First_Second_Third_ClassWithNestedNamespace* object);

MONO_EMBEDDINATOR_API Methods_Static* Methods_Static_Create(int32_t id);
MONO_EMBEDDINATOR_API int32_t Methods_Static_get_Id(Methods_Static* object);

MONO_EMBEDDINATOR_API Methods_Parameters* Methods_Parameters_new();
MONO_EMBEDDINATOR_API const char* Methods_Parameters_Concat(const char* first, const char* second);
MONO_EMBEDDINATOR_API void Methods_Parameters_Ref(bool* boolean, GString* string);
MONO_EMBEDDINATOR_API void Methods_Parameters_Out(const char* string, int32_t* length, GString* upper);

MONO_EMBEDDINATOR_API int32_t Methods_Item_get_Integer(Methods_Item* object);

MONO_EMBEDDINATOR_API Methods_Item* Methods_Factory_CreateItem(int32_t id);
MONO_EMBEDDINATOR_API Methods_Item* Methods_Factory_ReturnNull();

MONO_EMBEDDINATOR_API Methods_Collection* Methods_Collection_new();
MONO_EMBEDDINATOR_API void Methods_Collection_Add(Methods_Collection* object, Methods_Item* item);
MONO_EMBEDDINATOR_API void Methods_Collection_Remove(Methods_Collection* object, Methods_Item* item);
MONO_EMBEDDINATOR_API int32_t Methods_Collection_get_Count(Methods_Collection* object);
MONO_EMBEDDINATOR_API Methods_Item* Methods_Collection_get_Item(Methods_Collection* object, int32_t index);
MONO_EMBEDDINATOR_API void Methods_Collection_set_Item(Methods_Collection* object, int32_t index, Methods_Item* value);

MONO_EMBEDDINATOR_API Methods_DuplicateMethods* Methods_DuplicateMethods_new();
MONO_EMBEDDINATOR_API int32_t Methods_DuplicateMethods_DoIt(Methods_DuplicateMethods* object);
MONO_EMBEDDINATOR_API int32_t Methods_DuplicateMethods_DoIt_1(Methods_DuplicateMethods* object, int32_t i);
MONO_EMBEDDINATOR_API int32_t Methods_DuplicateMethods_DoIt_2(Methods_DuplicateMethods* object, const char* s);
MONO_EMBEDDINATOR_API int32_t Methods_DuplicateMethods_DoIt_3(Methods_DuplicateMethods* object, int32_t i, int32_t j);
MONO_EMBEDDINATOR_API bool Methods_DuplicateMethods_Find(Methods_DuplicateMethods* object, const char* name);
MONO_EMBEDDINATOR_API bool Methods_DuplicateMethods_Find_1(Methods_DuplicateMethods* object, const char* firstName, const char* lastName);

MONO_EMBEDDINATOR_API int32_t Methods_SomeExtensions_CountNonNull(Methods_Collection* collection);
MONO_EMBEDDINATOR_API int32_t Methods_SomeExtensions_CountNull(Methods_Collection* collection);
MONO_EMBEDDINATOR_API bool Methods_SomeExtensions_IsEmptyButNotNull(const char* string);
MONO_EMBEDDINATOR_API int32_t Methods_SomeExtensions_Increment(int32_t value);
MONO_EMBEDDINATOR_API const char* Methods_SomeExtensions_NotAnExtensionMethod();

MONO_EMBEDDINATOR_API Comparable_Class* Comparable_Class_new(int32_t i);
MONO_EMBEDDINATOR_API int32_t Comparable_Class_get_Integer(Comparable_Class* object);

MONO_EMBEDDINATOR_API Comparable_Generic* Comparable_Generic_new(int32_t i);
MONO_EMBEDDINATOR_API int32_t Comparable_Generic_get_Integer(Comparable_Generic* object);
MONO_EMBEDDINATOR_API int32_t Comparable_Generic_CompareTo(Comparable_Generic* object, Comparable_Generic* other);

MONO_EMBEDDINATOR_API Comparable_Both* Comparable_Both_new(int32_t i);
MONO_EMBEDDINATOR_API int32_t Comparable_Both_get_Integer(Comparable_Both* object);
MONO_EMBEDDINATOR_API int32_t Comparable_Both_CompareTo(Comparable_Both* object, Comparable_Both* other);

MONO_EMBEDDINATOR_API Comparable_Different* Comparable_Different_new(int32_t i);
MONO_EMBEDDINATOR_API int32_t Comparable_Different_get_Integer(Comparable_Different* object);
MONO_EMBEDDINATOR_API int32_t Comparable_Different_CompareTo(Comparable_Different* object, Comparable_Generic* generic);
MONO_EMBEDDINATOR_API int32_t Comparable_Different_CompareTo_1(Comparable_Different* object, int32_t integer);

MONO_EMBEDDINATOR_API Fields_Class* Fields_Class_new(bool enabled);
MONO_EMBEDDINATOR_API int64_t Fields_Class_get_MaxLong();
MONO_EMBEDDINATOR_API void Fields_Class_set_MaxLong(int64_t value);
MONO_EMBEDDINATOR_API Fields_Class* Fields_Class_get_Scratch();
MONO_EMBEDDINATOR_API void Fields_Class_set_Scratch(Fields_Class* value);
MONO_EMBEDDINATOR_API int32_t Fields_Class_get_Integer();
MONO_EMBEDDINATOR_API void Fields_Class_set_Integer(int32_t value);
MONO_EMBEDDINATOR_API bool Fields_Class_get_Boolean(Fields_Class* object);
MONO_EMBEDDINATOR_API void Fields_Class_set_Boolean(Fields_Class* object, bool value);
MONO_EMBEDDINATOR_API Fields_Struct* Fields_Class_get_Structure(Fields_Class* object);
MONO_EMBEDDINATOR_API void Fields_Class_set_Structure(Fields_Class* object, Fields_Struct* value);

MONO_EMBEDDINATOR_API Fields_Struct* Fields_Struct_new(bool enabled);
MONO_EMBEDDINATOR_API Fields_Struct* Fields_Struct_get_Empty();
MONO_EMBEDDINATOR_API void Fields_Struct_set_Empty(Fields_Struct* value);
MONO_EMBEDDINATOR_API Fields_Struct* Fields_Struct_get_Scratch();
MONO_EMBEDDINATOR_API void Fields_Struct_set_Scratch(Fields_Struct* value);
MONO_EMBEDDINATOR_API int32_t Fields_Struct_get_Integer();
MONO_EMBEDDINATOR_API void Fields_Struct_set_Integer(int32_t value);
MONO_EMBEDDINATOR_API bool Fields_Struct_get_Boolean(Fields_Struct* object);
MONO_EMBEDDINATOR_API void Fields_Struct_set_Boolean(Fields_Struct* object, bool value);
MONO_EMBEDDINATOR_API Fields_Class* Fields_Struct_get_Class(Fields_Struct* object);
MONO_EMBEDDINATOR_API void Fields_Struct_set_Class(Fields_Struct* object, Fields_Class* value);

MONO_EMBEDDINATOR_API Exceptions_Throwers* Exceptions_Throwers_new();

MONO_EMBEDDINATOR_API Exceptions_ThrowInStaticCtor* Exceptions_ThrowInStaticCtor_new();

MONO_EMBEDDINATOR_API Exceptions_Base* Exceptions_Base_new(bool broken);

MONO_EMBEDDINATOR_API Exceptions_Super* Exceptions_Super_new(bool broken);

MONO_EMBEDDINATOR_API EqualsHashOverrides_Class* EqualsHashOverrides_Class_new(int32_t x);
MONO_EMBEDDINATOR_API int32_t EqualsHashOverrides_Class_get_X(EqualsHashOverrides_Class* object);
MONO_EMBEDDINATOR_API void EqualsHashOverrides_Class_set_X(EqualsHashOverrides_Class* object, int32_t value);

MONO_EMBEDDINATOR_API EqualsHashOverrides_EquatableClass* EqualsHashOverrides_EquatableClass_new(int32_t y);
MONO_EMBEDDINATOR_API int32_t EqualsHashOverrides_EquatableClass_get_Y(EqualsHashOverrides_EquatableClass* object);
MONO_EMBEDDINATOR_API void EqualsHashOverrides_EquatableClass_set_Y(EqualsHashOverrides_EquatableClass* object, int32_t value);
MONO_EMBEDDINATOR_API bool EqualsHashOverrides_EquatableClass_Equals(EqualsHashOverrides_EquatableClass* object, EqualsHashOverrides_Class* obj);

MONO_EMBEDDINATOR_API EqualsHashOverrides_EquatableInt* EqualsHashOverrides_EquatableInt_new(int32_t y);
MONO_EMBEDDINATOR_API int32_t EqualsHashOverrides_EquatableInt_get_Y(EqualsHashOverrides_EquatableInt* object);
MONO_EMBEDDINATOR_API void EqualsHashOverrides_EquatableInt_set_Y(EqualsHashOverrides_EquatableInt* object, int32_t value);
MONO_EMBEDDINATOR_API bool EqualsHashOverrides_EquatableInt_Equals(EqualsHashOverrides_EquatableInt* object, int32_t obj);

typedef enum Enums_ByteEnum
{
    Enums_ByteEnum_Zero = 0,
    Enums_ByteEnum_Max = 255
} Enums_ByteEnum;

typedef enum Enums_IntEnum
{
    Enums_IntEnum_Min = -2147483648,
    Enums_IntEnum_Max = 2147483647
} Enums_IntEnum;

typedef enum Enums_ByteFlags
{
    Enums_ByteFlags_Empty = 0,
    Enums_ByteFlags_Bit0 = 1,
    Enums_ByteFlags_Bit1 = 2,
    Enums_ByteFlags_Bit2 = 4,
    Enums_ByteFlags_Bit3 = 8,
    Enums_ByteFlags_Bit4 = 16,
    Enums_ByteFlags_Bit5 = 32,
    Enums_ByteFlags_Bit6 = 64,
    Enums_ByteFlags_Bit7 = 128
} Enums_ByteFlags;

typedef enum Enums_ShortEnum
{
    Enums_ShortEnum_Min = -32768,
    Enums_ShortEnum_Max = 32767
} Enums_ShortEnum;

MONO_EMBEDDINATOR_API Enums_ByteFlags Enums_Enumer_Test(Enums_ByteEnum b, Enums_IntEnum* i, Enums_ShortEnum* s);

MONO_EMBEDDINATOR_API Constructors_Unique* Constructors_Unique_new();
MONO_EMBEDDINATOR_API Constructors_Unique* Constructors_Unique_new_1(int32_t id);
MONO_EMBEDDINATOR_API int32_t Constructors_Unique_get_Id(Constructors_Unique* object);

MONO_EMBEDDINATOR_API Constructors_SuperUnique* Constructors_SuperUnique_new();

MONO_EMBEDDINATOR_API Constructors_Implicit* Constructors_Implicit_new();
MONO_EMBEDDINATOR_API const char* Constructors_Implicit_get_TestResult(Constructors_Implicit* object);

MONO_EMBEDDINATOR_API Constructors_AllTypeCode* Constructors_AllTypeCode_new(bool b1, gunichar2 c2, const char* s);
MONO_EMBEDDINATOR_API Constructors_AllTypeCode* Constructors_AllTypeCode_new_1(int8_t i8, int16_t i16, int32_t i32, int64_t i64);
MONO_EMBEDDINATOR_API Constructors_AllTypeCode* Constructors_AllTypeCode_new_2(uint8_t u8, uint16_t u16, uint32_t u32, uint64_t u64);
MONO_EMBEDDINATOR_API Constructors_AllTypeCode* Constructors_AllTypeCode_new_3(float f32, double f64);
MONO_EMBEDDINATOR_API bool Constructors_AllTypeCode_get_TestResult(Constructors_AllTypeCode* object);

MONO_EMBEDDINATOR_API Constructors_DefaultValues* Constructors_DefaultValues_new(uint8_t b, int16_t s, int32_t i, int64_t l);
MONO_EMBEDDINATOR_API Constructors_DefaultValues* Constructors_DefaultValues_new_1(int32_t nonDefault, const char* s, float f, double d, Enums_ByteEnum e);
MONO_EMBEDDINATOR_API bool Constructors_DefaultValues_get_IsDefault(Constructors_DefaultValues* object);

MONO_EMBEDDINATOR_API Constructors_Duplicates* Constructors_Duplicates_new(uint8_t b, int16_t s, int32_t i, int64_t l);
MONO_EMBEDDINATOR_API Constructors_Duplicates* Constructors_Duplicates_new_1(int32_t b, int32_t s, int32_t i, int32_t l);
MONO_EMBEDDINATOR_API Constructors_Duplicates* Constructors_Duplicates_new_2(uint8_t b, uint8_t s, uint8_t i, uint8_t l);

MONO_EMBEDDINATOR_END_DECLS
